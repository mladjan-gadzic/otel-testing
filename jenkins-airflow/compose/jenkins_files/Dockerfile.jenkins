# Base Jenkins LTS with JDK 17 image
FROM jenkins/jenkins:lts-jdk17

# Switch to root user to install packages
USER root

# Update the package lists
RUN apt-get update && apt-get install --fix-missing -y wget gnupg2 software-properties-common

# Detect system architecture and install the appropriate JDK 8 version
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ]; then \
        echo "Installing JDK 8 for ARM64 (aarch64)"; \
        apt-get install -y wget gnupg2 software-properties-common && \
        wget -qO - https://packages.adoptium.net/artifactory/api/gpg/key/public | apt-key add - && \
        add-apt-repository --yes https://packages.adoptium.net/artifactory/deb/ && \
        apt-get update && \
        apt-get install -y temurin-8-jdk && \
        export JAVA_HOME_8=/usr/lib/jvm/temurin-8-jdk-arm64; \
    elif [ "$ARCH" = "armv7l" ]; then \
        echo "Installing JDK 8 for ARM32 (armv7l)"; \
        apt-get install -y openjdk-8-jdk && \
        export JAVA_HOME_8=/usr/lib/jvm/java-8-openjdk-armhf; \
    elif [ "$ARCH" = "x86_64" ]; then \
        echo "Installing JDK 8 for x86_64"; \
        apt-get install -y openjdk-8-jdk && \
        export JAVA_HOME_8=/usr/lib/jvm/java-8-openjdk-amd64; \
    else \
        echo "Unsupported architecture: $ARCH. Exiting."; \
        exit 1; \
    fi && \
    echo "JDK 8 installed for $ARCH"

# Install ping utility (iputils-ping)
RUN apt-get install -y iputils-ping

ARG USE_CUSTOM_JENKINS_WAR

# Copy the file under the tmp so that it's available inside the container.
COPY jenkins.war /tmp/jenkins.war

# Check if the custom war file, needs to be used.
RUN if [ "$USE_CUSTOM_JENKINS_WAR" = "true" ]; then \
      echo "Using custom 'jenkins.war' file."; \
      # This is a copy inside the docker container, from one location to another.
      # It's NOT a copy from the host to the container.
      # That's why we have to go throught the tmp copy.
      mv /tmp/jenkins.war /usr/share/jenkins/jenkins.war; \
    else \
      echo "Using 'jenkins.war' from the official docker image."; \
    fi

# Copy the plugins.txt file under the Docker image
COPY plugins.txt /usr/share/jenkins/ref/plugins.txt

# Install plugins using Plugin Installation Manager Tool.
# We need to install the plugins before using the configuration-as-code file.
RUN jenkins-plugin-cli --plugin-file /usr/share/jenkins/ref/plugins.txt

# Set environment variable for JCasC to load the configuration on startup
ENV CASC_JENKINS_CONFIG=/var/jenkins_home/casc_configs/jenkins-config.yml

# Switch back to the Jenkins user
USER jenkins

# Set up environment variables for JDK 8 (can be used in pipeline later)
ENV JAVA_HOME_8=$JAVA_HOME_8
# ENV PATH="$JAVA_HOME_8/bin:$PATH"

# Expose Jenkins port
EXPOSE 8080
EXPOSE 50000

# Default Jenkins entrypoint
ENTRYPOINT ["/usr/bin/tini", "--", "/usr/local/bin/jenkins.sh"]

node {
  try {
    stage('Checkout Project Hadoop') {
      // Clone the project repository
      git branch: 'branch-3.3.6', url: 'https://github.com/apache/hadoop.git'
    }

    stage('Set Up JDK 8') {
      // Version should be 17.
      sh 'java -version'

      // Set JAVA_HOME_8 to JAVA_HOME.
      env.JAVA_HOME = env.JAVA_HOME_8
      env.PATH = "${env.JAVA_HOME}/bin:${env.PATH}"

      // Verify the Java version, it should now be 8.
      sh 'java -version'
    }

    stage('Build') {
      // We are on the cloned repo dir.
      sh 'ls -lah'
    
      // Use the configured Maven installation
      dir('hadoop-common-project/hadoop-common') {
        withMaven(maven: 'M3') {
          sh 'mvn clean install -DskipTests -DskipShade'
        }
      }

      dir('hadoop-hdfs-project/hadoop-hdfs') {
        withMaven(maven: 'M3') {
          sh 'mvn clean install -DskipTests -DskipShade'
        }
      }
    }

    stage('Run tests in a sequence with span attributes and without.') {
      dir('hadoop-common-project/hadoop-common') {
        withMaven(maven: 'M3') {
          // Run some test classes from hadoop-common but with added attributes.
          sh 'mvn test -Dtest=TestConfigurationDeprecation'

          withSpanAttributes([
            spanAttribute(key: 'component', value: 'hadoop-common-project'),
            spanAttribute(key: 'directory', value: 'hadoop-common-project/hadoop-common'),
            spanAttribute(key: 'class', value: 'TestCommonConfigurationFields'),
            spanAttribute(key: 'command', value: 'mvn test -Dtest=TestCommonConfigurationFields')
          ]) {
            sh (label: 'mvn run TestCommonConfigurationFields', script: 'mvn test -Dtest=TestCommonConfigurationFields')
          }
        }
      }
      dir('hadoop-hdfs-project/hadoop-hdfs') {
        withMaven(maven: 'M3') {
          // Run some test classes from hadoop-hdfs but with added attributes.
          withSpanAttributes([
            spanAttribute(key: 'component', value: 'hadoop-hdfs-project'),
            spanAttribute(key: 'directory', value: 'hadoop-hdfs-project/hadoop-hdfs'),
            spanAttribute(key: 'class', value: 'TestLeaseManager'),
            spanAttribute(key: 'command', value: 'mvn test -Dtest=TestLeaseManager')
          ]) {
            sh 'mvn test -Dtest=TestLeaseManager'
          }

          withSpanAttributes([
            spanAttribute(key: 'component', value: 'hadoop-hdfs-project'),
            spanAttribute(key: 'directory', value: 'hadoop-hdfs-project/hadoop-hdfs'),
            spanAttribute(key: 'class', value: 'TestHdfsServerConstants'),
            spanAttribute(key: 'command', value: 'mvn test -Dtest=TestHdfsServerConstants')
          ]) {
            sh (label: 'mvn run TestHdfsServerConstants', script: 'mvn test -Dtest=TestHdfsServerConstants')
          }
        }
      }
    }

    @Library('test-lib') _
    stage('Run tests from a shared lib.') {
      test.runHadoopTests()
    }

    // If all stages succeed
    echo 'Build and tests succeeded!'

  } catch (Exception e) {
    echo 'Build or tests failed! Investigate the issue.'
    error "Build failed: ${e.getMessage()}"
  } finally {
    echo 'Cleaning up after the build...'
    // TODO: Add extra cleanup actions or notifications here.
  }
}
